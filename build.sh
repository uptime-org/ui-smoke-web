#!/bin/bash
# Local Build Script for ui-smoke-web
# This script builds Docker images for local development
# Generated by GX Genesis

set -e

SERVICE_NAME="ui-smoke-web"
TIER="ui"
ORG="uptime-org"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

show_help() {
    echo "Usage: $0 [options]"
    echo ""
    echo "Options:"
    echo "  --push             Push image to registry after build"
    echo "  --tag TAG          Use specific tag (default: latest)"
    echo "  --registry REGISTRY Use specific registry (default: localhost:5000)"
    echo "  --load             Load image into local Kubernetes (docker-desktop)"
    echo "  --help, -h         Show this help"
    echo ""
    echo "Examples:"
    echo "  $0                 # Build for local development"
    echo "  $0 --load          # Build and load into local K8s"
    echo "  $0 --tag v1.2.3    # Build with specific tag"
    echo "  $0 --push          # Build and push to registry"
}

# Parse arguments
PUSH=false
TAG="latest"
REGISTRY="localhost:5000"
LOAD_K8S=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --push)
            PUSH=true
            shift
            ;;
        --tag)
            TAG="$2"
            shift 2
            ;;
        --registry)
            REGISTRY="$2"
            shift 2
            ;;
        --load)
            LOAD_K8S=true
            shift
            ;;
        --help|-h)
            show_help
            exit 0
            ;;
        *)
            error "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
done

# Detect if we're on macOS with Docker Desktop
if [[ "$(uname)" == "Darwin" ]] && (docker info 2>/dev/null | grep -q "Docker Desktop" || docker version 2>/dev/null | grep -q "desktop-linux"); then
    info "üê≥ Detected Docker Desktop on macOS"
    LOAD_K8S=true  # Auto-enable loading for Docker Desktop
fi

# Build configuration
IMAGE_NAME="${SERVICE_NAME}"
if [[ "$LOAD_K8S" == "true" ]]; then
    # For local K8s, use a simple tag that doesn't need registry
    FULL_IMAGE="${IMAGE_NAME}:${TAG}"
else
    FULL_IMAGE="${REGISTRY}/${ORG}/${IMAGE_NAME}:${TAG}"
fi

info "üöÄ Building ${SERVICE_NAME}"
info "üìÅ Working directory: $(pwd)"
info "üè∑Ô∏è  Image: ${FULL_IMAGE}"

# Check if Dockerfile exists
if [[ ! -f "Dockerfile" ]]; then
    error "Dockerfile not found in current directory"
    exit 1
fi

# Build the Docker image
info "üî® Building Docker image..."
if docker build -t "${FULL_IMAGE}" .; then
    success "Docker image built successfully"
else
    error "Docker build failed"
    exit 1
fi

# Load into local Kubernetes if requested
if [[ "$LOAD_K8S" == "true" ]]; then
    info "üì¶ Loading image into local Kubernetes..."
    
    # For Docker Desktop, images are automatically available
    if docker version 2>/dev/null | grep -q "desktop-linux" || docker info 2>/dev/null | grep -q "Docker Desktop"; then
        success "Image available in Docker Desktop Kubernetes"
    else
        # For other local K8s (minikube, kind, etc.)
        if command -v minikube >/dev/null 2>&1; then
            info "Loading into minikube..."
            minikube image load "${FULL_IMAGE}"
        elif command -v kind >/dev/null 2>&1; then
            info "Loading into kind..."
            kind load docker-image "${FULL_IMAGE}"
        else
            warning "Local Kubernetes detected but not sure how to load image"
            info "Image built as: ${FULL_IMAGE}"
        fi
    fi
fi

# Push to registry if requested
if [[ "$PUSH" == "true" ]]; then
    info "üì§ Pushing to registry..."
    if docker push "${FULL_IMAGE}"; then
        success "Image pushed successfully"
    else
        error "Push failed"
        exit 1
    fi
fi

# Show next steps
echo ""
success "üéâ Build completed!"
info "üí° Next steps:"
if [[ "$LOAD_K8S" == "true" ]]; then
    echo "  # Deploy to local Kubernetes:"
    echo "  gx deploy ${TIER}/${SERVICE_NAME}"
    echo ""
    echo "  # Or update existing deployment:"
    echo "  kubectl rollout restart deployment/${SERVICE_NAME} -n local"
else
    echo "  # Load into local Kubernetes:"
    echo "  $0 --load"
    echo ""
    echo "  # Deploy to local Kubernetes:"
    echo "  gx deploy ${TIER}/${SERVICE_NAME}"
fi

info "üîç Image details:"
echo "  Name: ${FULL_IMAGE}"
echo "  Size: $(docker images --format "table {{.Repository}}:{{.Tag}}\t{{.Size}}" | grep "${IMAGE_NAME}:${TAG}" | awk '{print $2}' || echo "Unknown")"